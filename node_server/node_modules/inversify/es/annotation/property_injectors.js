/**
 * inversify v.2.0.0-beta.5 - A lightweight IoC container written in TypeScript.
 * Copyright (c) 2015 Remo H. Jansen
 * MIT inversify.io/LICENSE
 * http://inversify.io
 */
var INJECTION = Symbol();
function _proxyGetter(proto, key, resolve) {
    function getter() {
        if (!Reflect.hasMetadata(INJECTION, this, key)) {
            Reflect.defineMetadata(INJECTION, resolve(), this, key);
        }
        return Reflect.getMetadata(INJECTION, this, key);
    }
    function setter(newVal) {
        Reflect.defineMetadata(INJECTION, newVal, this, key);
    }
    Object.defineProperty(proto, key, {
        configurable: true,
        enumerable: true,
        get: getter,
        set: setter
    });
}
function makePropertyInjectDecorator(kernel) {
    return function (serviceIdentifier) {
        return function (proto, key) {
            var resolve = function () {
                return kernel.get(serviceIdentifier);
            };
            _proxyGetter(proto, key, resolve);
        };
    };
}
function makePropertyInjectNamedDecorator(kernel) {
    return function (serviceIdentifier, named) {
        return function (proto, key) {
            var resolve = function () {
                return kernel.getNamed(serviceIdentifier, named);
            };
            _proxyGetter(proto, key, resolve);
        };
    };
}
function makePropertyInjectTaggedDecorator(kernel) {
    return function (serviceIdentifier, key, value) {
        return function (proto, propertyName) {
            var resolve = function () {
                return kernel.getTagged(serviceIdentifier, key, value);
            };
            _proxyGetter(proto, propertyName, resolve);
        };
    };
}
function makePropertyMultiInjectDecorator(kernel) {
    return function (serviceIdentifier) {
        return function (proto, key) {
            var resolve = function () {
                return kernel.getAll(serviceIdentifier);
            };
            _proxyGetter(proto, key, resolve);
        };
    };
}
export { makePropertyInjectDecorator, makePropertyMultiInjectDecorator, makePropertyInjectTaggedDecorator, makePropertyInjectNamedDecorator };
