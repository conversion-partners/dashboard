/**
 * inversify v.2.0.0-beta.1 - A lightweight IoC container written in TypeScript.
 * Copyright (c) 2015 Remo H. Jansen
 * MIT inversify.io/LICENSE
 * http://inversify.io
 */
import BindingCount from "../bindings/binding_count";
import Binding from "../bindings/binding";
import Lookup from "./lookup";
import Planner from "../planning/planner";
import Resolver from "../resolution/resolver";
import * as ERROR_MSGS from "../constants/error_msgs";
import * as METADATA_KEY from "../constants/metadata_keys";
import BindingToSyntax from "../syntax/binding_to_syntax";
import Metadata from "../planning/metadata";
import Target from "../planning/target";
import Request from "../planning/request";
var Kernel = (function () {
    function Kernel() {
        this._planner = new Planner();
        this._resolver = new Resolver();
        this._bindingDictionary = new Lookup();
        this._middleware = null;
    }
    Kernel.prototype.load = function () {
        var _this = this;
        var modules = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            modules[_i - 0] = arguments[_i];
        }
        modules.forEach(function (module) { module(_this); });
    };
    Kernel.prototype.applyMiddleware = function () {
        var middlewares = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            middlewares[_i - 0] = arguments[_i];
        }
        this._middleware = middlewares.reverse().reduce(function (prev, curr) {
            return curr(prev);
        }, this._resolver.resolve.bind(this._resolver));
    };
    Kernel.prototype.bind = function (serviceIdentifier) {
        var binding = new Binding(serviceIdentifier);
        this._bindingDictionary.add(serviceIdentifier, binding);
        return new BindingToSyntax(binding);
    };
    Kernel.prototype.unbind = function (serviceIdentifier) {
        try {
            this._bindingDictionary.remove(serviceIdentifier);
        }
        catch (e) {
            throw new Error(ERROR_MSGS.CANNOT_UNBIND + " " + serviceIdentifier);
        }
    };
    Kernel.prototype.unbindAll = function () {
        this._bindingDictionary = new Lookup();
    };
    Kernel.prototype.get = function (serviceIdentifier) {
        return this._get(serviceIdentifier, null);
    };
    Kernel.prototype.getNamed = function (serviceIdentifier, named) {
        return this.getTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);
    };
    Kernel.prototype.getTagged = function (serviceIdentifier, key, value) {
        var metadata = new Metadata(key, value);
        var target = new Target(null, serviceIdentifier, metadata);
        return this._get(serviceIdentifier, target);
    };
    Kernel.prototype.getAll = function (serviceIdentifier) {
        var _this = this;
        var bindings = this._planner.getBindings(this, serviceIdentifier);
        switch (bindings.length) {
            case BindingCount.NoBindingsAvailable:
                throw new Error(ERROR_MSGS.NOT_REGISTERED + " " + serviceIdentifier);
            case BindingCount.OnlyOneBindingAvailable:
            case BindingCount.MultipleBindingsAvailable:
            default:
                return bindings.map(function (binding) {
                    return _this._planAndResolve(binding, null);
                });
        }
    };
    Kernel.prototype.getServiceIdentifierAsString = function (serviceIdentifier) {
        var type = typeof serviceIdentifier;
        if (type === "function") {
            var _serviceIdentifier = serviceIdentifier;
            return _serviceIdentifier.name;
        }
        else if (type === "symbol") {
            return serviceIdentifier.toString();
        }
        else {
            var _serviceIdentifier = serviceIdentifier;
            return _serviceIdentifier;
        }
    };
    Kernel.prototype._get = function (serviceIdentifier, target) {
        var bindings = this._planner.getBindings(this, serviceIdentifier);
        if (target !== null) {
            var request = new Request(serviceIdentifier, this._planner.createContext(this), null, bindings, target);
            bindings = this._planner.getActiveBindings(request, target);
        }
        if (bindings.length === BindingCount.NoBindingsAvailable) {
            throw new Error(ERROR_MSGS.NOT_REGISTERED + " " + serviceIdentifier);
        }
        else if (bindings.length === BindingCount.OnlyOneBindingAvailable) {
            return this._planAndResolve(bindings[0], target);
        }
        else {
            throw new Error(ERROR_MSGS.AMBIGUOUS_MATCH + " " + serviceIdentifier);
        }
    };
    Kernel.prototype._planAndResolve = function (binding, target) {
        var context = this._planner.createContext(this);
        this._planner.createPlan(context, binding, target);
        return (this._middleware !== null) ? this._middleware(context) : this._resolver.resolve(context);
    };
    return Kernel;
}());
export default Kernel;
