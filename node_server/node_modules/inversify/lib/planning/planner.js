/**
 * inversify v.2.0.0-beta.1 - A lightweight IoC container written in TypeScript.
 * Copyright (c) 2015 Remo H. Jansen
 * MIT inversify.io/LICENSE
 * http://inversify.io
 */
"use strict";
var plan_1 = require("./plan");
var context_1 = require("./context");
var request_1 = require("./request");
var target_1 = require("./target");
var METADATA_KEY = require("../constants/metadata_keys");
var ERROR_MSGS = require("../constants/error_msgs");
var binding_type_1 = require("../bindings/binding_type");
var Planner = (function () {
    function Planner() {
    }
    Planner.prototype.createContext = function (kernel) {
        return new context_1.default(kernel);
    };
    Planner.prototype.createPlan = function (context, binding, target) {
        var _this = this;
        var rootRequest = new request_1.default(binding.serviceIdentifier, context, null, binding, target);
        var plan = new plan_1.default(context, rootRequest);
        context.addPlan(plan);
        var dependencies = this._getDependencies(binding.implementationType);
        dependencies.forEach(function (dependency) { _this._createSubRequest(rootRequest, dependency); });
        return plan;
    };
    Planner.prototype.getBindings = function (kernel, serviceIdentifier) {
        var bindings = [];
        var _kernel = kernel;
        var _bindingDictionary = _kernel._bindingDictionary;
        if (_bindingDictionary.hasKey(serviceIdentifier)) {
            bindings = _bindingDictionary.get(serviceIdentifier);
        }
        return bindings;
    };
    Planner.prototype.getActiveBindings = function (parentRequest, target) {
        var bindings = this.getBindings(parentRequest.parentContext.kernel, target.serviceIdentifier);
        var activeBindings = [];
        if (bindings.length > 1 && target.isArray() === false) {
            activeBindings = bindings.filter(function (binding) {
                var request = new request_1.default(binding.serviceIdentifier, parentRequest.parentContext, parentRequest, binding, target);
                return binding.constraint(request);
            });
        }
        else {
            activeBindings = bindings;
        }
        return activeBindings;
    };
    Planner.prototype._createSubRequest = function (parentRequest, target) {
        try {
            var activeBindings = this.getActiveBindings(parentRequest, target);
            if (activeBindings.length === 0) {
                var serviceIdentifier = parentRequest.parentContext.kernel.getServiceIdentifierAsString(target.serviceIdentifier);
                throw new Error(ERROR_MSGS.NOT_REGISTERED + " " + serviceIdentifier);
            }
            else if (activeBindings.length > 1 && target.isArray() === false) {
                var serviceIdentifier = parentRequest.parentContext.kernel.getServiceIdentifierAsString(target.serviceIdentifier);
                throw new Error(ERROR_MSGS.AMBIGUOUS_MATCH + " " + serviceIdentifier);
            }
            else {
                this._createChildRequest(parentRequest, target, activeBindings);
            }
        }
        catch (error) {
            if (error instanceof RangeError) {
                this._throwWhenCircularDependenciesFound(parentRequest.parentContext.plan.rootRequest);
            }
            else {
                throw new Error(error.message);
            }
        }
    };
    Planner.prototype._createChildRequest = function (parentRequest, target, bindings) {
        var _this = this;
        var childRequest = parentRequest.addChildRequest(target.serviceIdentifier, bindings, target);
        var subChildRequest = childRequest;
        bindings.forEach(function (binding) {
            if (target.isArray()) {
                subChildRequest = childRequest.addChildRequest(binding.serviceIdentifier, binding, target);
            }
            if (binding.type === binding_type_1.default.Instance) {
                var subDependencies = _this._getDependencies(binding.implementationType);
                subDependencies.forEach(function (d, index) {
                    _this._createSubRequest(subChildRequest, d);
                });
            }
        });
    };
    Planner.prototype._throwWhenCircularDependenciesFound = function (request, previousServiceIdentifiers) {
        var _this = this;
        if (previousServiceIdentifiers === void 0) { previousServiceIdentifiers = []; }
        previousServiceIdentifiers.push(request.serviceIdentifier);
        request.childRequests.forEach(function (childRequest) {
            var serviceIdentifier = childRequest.serviceIdentifier;
            if (previousServiceIdentifiers.indexOf(serviceIdentifier) === -1) {
                if (childRequest.childRequests.length > 0) {
                    _this._throwWhenCircularDependenciesFound(childRequest, previousServiceIdentifiers);
                }
                else {
                    previousServiceIdentifiers.push(serviceIdentifier);
                }
            }
            else {
                var tailServiceIdentifier = request.parentContext.kernel.getServiceIdentifierAsString(request.serviceIdentifier);
                throw new Error(ERROR_MSGS.CIRCULAR_DEPENDENCY + " " + serviceIdentifier + " and " + tailServiceIdentifier);
            }
        });
    };
    Planner.prototype._getDependencies = function (func) {
        if (func === null) {
            return [];
        }
        var constructorName = func.name;
        var targetsTypes = Reflect.getMetadata(METADATA_KEY.PARAM_TYPES, func);
        if (targetsTypes === undefined) {
            var msg = ERROR_MSGS.MISSING_INJECTABLE_ANNOTATION + " " + constructorName + ".";
            throw new Error(msg);
        }
        var targetsMetadata = Reflect.getMetadata(METADATA_KEY.TAGGED, func) || [];
        var targets = [];
        var _loop_1 = function(i) {
            var targetType = targetsTypes[i];
            var targetMetadata = targetsMetadata[i.toString()] || [];
            var targetMetadataMap = {};
            targetMetadata.forEach(function (m) {
                targetMetadataMap[m.key.toString()] = m.value;
            });
            var inject = targetMetadataMap[METADATA_KEY.INJECT_TAG];
            var multiInject = targetMetadataMap[METADATA_KEY.MULTI_INJECT_TAG];
            var targetName = targetMetadataMap[METADATA_KEY.NAME_TAG];
            targetType = (inject || multiInject) ? (inject || multiInject) : targetType;
            if (targetType === Object || targetType === Function || targetType === undefined) {
                var msg = ERROR_MSGS.MISSING_INJECT_ANNOTATION + " argument " + i + " in class " + constructorName + ".";
                throw new Error(msg);
            }
            var target = new target_1.default(targetName, targetType);
            target.metadata = targetMetadata;
            targets.push(target);
        };
        for (var i = 0; i < func.length; i++) {
            _loop_1(i);
        }
        if (targets.length === 0 && this._baseClassHasDepencencies(func)) {
            throw new Error(ERROR_MSGS.MISSING_EXPLICIT_CONSTRUCTOR + " " + constructorName + ".");
        }
        return targets;
    };
    Planner.prototype._baseClassHasDepencencies = function (func) {
        var baseConstructor = Object.getPrototypeOf(func.prototype).constructor;
        if (baseConstructor !== Object) {
            if (baseConstructor.length > 0) {
                return true;
            }
            else {
                return this._baseClassHasDepencencies(baseConstructor);
            }
        }
        else {
            return false;
        }
    };
    return Planner;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Planner;
