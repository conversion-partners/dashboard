/**
 * inversify v.2.0.0-beta.1 - A lightweight IoC container written in TypeScript.
 * Copyright (c) 2015 Remo H. Jansen
 * MIT inversify.io/LICENSE
 * http://inversify.io
 */
"use strict";
var METADATA_KEY = require("../constants/metadata_keys");
var ERROR_MSGS = require("../constants/error_msgs");
function tagParameter(target, targetKey, index, metadata) {
    var paramsMetadata = null;
    if (targetKey !== undefined) {
        throw new Error(ERROR_MSGS.INVALID_DECORATOR_OPERATION);
    }
    if (Reflect.hasOwnMetadata(METADATA_KEY.TAGGED, target) !== true) {
        paramsMetadata = {};
    }
    else {
        paramsMetadata = Reflect.getMetadata(METADATA_KEY.TAGGED, target);
    }
    var paramMetadata = paramsMetadata[index.toString()];
    if (Array.isArray(paramMetadata) !== true) {
        paramMetadata = [];
    }
    else {
        for (var i = 0; i < paramMetadata.length; i++) {
            var m = paramMetadata[i];
            if (m.key === metadata.key) {
                throw new Error(ERROR_MSGS.DUPLICATED_METADATA + " " + m.key);
            }
        }
    }
    paramMetadata.push(metadata);
    paramsMetadata[index.toString()] = paramMetadata;
    Reflect.defineMetadata(METADATA_KEY.TAGGED, paramsMetadata, target);
    return target;
}
exports.tagParameter = tagParameter;
function _decorate(decorators, target) {
    Reflect.decorate(decorators, target);
}
function _param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); };
}
function decorate(decorator, target, parameterIndex) {
    if (typeof parameterIndex === "number") {
        _decorate([_param(parameterIndex, decorator)], target);
    }
    else {
        _decorate([decorator], target);
    }
}
exports.decorate = decorate;
