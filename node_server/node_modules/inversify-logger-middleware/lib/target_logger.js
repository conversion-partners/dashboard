/**
 * inversify-logger-middleware v.1.0.0-beta.3 - A basic logger middleware for InversifyJS
 * Copyright (c) 2015 Remo H. Jansen <remo.jansen@wolksoftware.com> (http://www.remojansen.com)
 * MIT inversify.io/LICENSE
 * https://github.com/inversify/inversify-logger-middleware#readme
 */
"use strict";
var utils_1 = require("./utils");
function getTargetLogEntry(log, options, target, indentationForDepth) {
    var logProperty = utils_1.makePropertyLogger(indentationForDepth);
    log = logProperty(log, 0, "target");
    if (options.request.target.name) {
        log = logProperty(log, 1, "name", (target.name.value() || "undefined"));
    }
    if (options.request.target.serviceIdentifier) {
        log = logProperty(log, 1, "serviceIdentifier", target.serviceIdentifier);
    }
    if (options.request.target.metadata && Array.isArray(target.metadata)) {
        log = logProperty(log, 1, "metadata");
        target.metadata.forEach(function (m, i) {
            log = logProperty(log, 2, "item", i);
            log = logProperty(log, 3, "key", m.key);
            log = logProperty(log, 3, "value", m.value);
        });
    }
    return log;
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = getTargetLogEntry;
