/**
 * inversify-logger-middleware v.1.0.0-beta.3 - A basic logger middleware for InversifyJS
 * Copyright (c) 2015 Remo H. Jansen <remo.jansen@wolksoftware.com> (http://www.remojansen.com)
 * MIT inversify.io/LICENSE
 * https://github.com/inversify/inversify-logger-middleware#readme
 */
"use strict";
var utils_1 = require("./utils");
function scopeToString(scope) {
    switch (scope) {
        case 1:
            return "Singleton";
        case 0:
        default:
            return "Transient";
    }
}
function bindingTypeToString(type) {
    switch (type) {
        case 1:
            return "Instance";
        case 2:
            return "ConstantValue";
        case 3:
            return "DynamicValue";
        case 4:
            return "Constructor";
        case 5:
            return "Factory";
        case 6:
            return "Provider";
        case 0:
        default:
            return "Invalid";
    }
}
function getBindingLogEntry(log, options, index, binding, indentationForDepth) {
    var logProperty = utils_1.makePropertyLogger(indentationForDepth);
    log = logProperty(log, 0, "item", index);
    var props = [
        "type", "serviceIdentifier", "implementationType",
        "activated", "cache", "constraint", "dynamicValue",
        "factory", "onActivation", "provider", "scope"
    ];
    props.forEach(function (prop) {
        var _bindings = options.request.bindings;
        var _binding = binding;
        if (_bindings[prop]) {
            var value = _binding[prop];
            switch (prop) {
                case "scope":
                    value = scopeToString(_binding[prop]);
                    break;
                case "type":
                    value = bindingTypeToString(_binding[prop]);
                    break;
                case "implementationType":
                    value = (_binding[prop].name || "undefined");
                    break;
                default:
                    value = _binding[prop];
                    break;
            }
            value = (value === null || value === undefined) ? "null" : value;
            log = logProperty(log, 1, prop, value);
        }
    });
    return log;
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = getBindingLogEntry;
