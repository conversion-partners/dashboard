/**
 * inversify-logger-middleware v.1.0.0-beta.3 - A basic logger middleware for InversifyJS
 * Copyright (c) 2015 Remo H. Jansen <remo.jansen@wolksoftware.com> (http://www.remojansen.com)
 * MIT inversify.io/LICENSE
 * https://github.com/inversify/inversify-logger-middleware#readme
 */
"use strict";
var constants_1 = require("./constants");
var utils_1 = require("./utils");
var binding_logger_1 = require("./binding_logger");
var target_logger_1 = require("./target_logger");
var utils_2 = require("./utils");
function getRequestLogEntry(log, options, request, depth, index) {
    var indentationForDepth = utils_1.getIndentationForDepth(depth);
    var logProperty = utils_2.makePropertyLogger(indentationForDepth);
    log = logProperty(log, 0, "item", index);
    if (options.request.serviceIdentifier === true) {
        log = logProperty(log, 1, "serviceIdentifier", request.serviceIdentifier);
    }
    if (options.request.bindings !== undefined) {
        log = logProperty(log, 1, "bindings");
        request.bindings.forEach(function (binding, i) {
            log = binding_logger_1.default(log, options, i, binding, "" + indentationForDepth + constants_1.indentation + constants_1.indentation);
        });
    }
    if (options.request.target !== undefined && request.target !== null) {
        log = target_logger_1.default(log, options, request.target, "" + indentationForDepth + constants_1.indentation);
    }
    if (request.childRequests.length > 0) {
        log = logProperty(log, 1, "childRequests");
    }
    request.childRequests.forEach(function (childRequest, i) {
        log = getRequestLogEntry(log, options, childRequest, (depth + 2), i);
    });
    return log;
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = getRequestLogEntry;
