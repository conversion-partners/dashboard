/**
 * inversify-binding-decorators v.1.0.0-beta.4 - An utility that allows developers to declare InversifyJS bindings using ES2016 decorators
 * Copyright (c) 2015 Remo H. Jansen <remo.jansen@wolksoftware.com> (http://www.remojansen.com)
 * MIT inversify.io/LICENSE
 * https://github.com/inversify/inversify-binding-decorators#readme
 */
"use strict";
var ProvideInWhenOnSyntax = (function () {
    function ProvideInWhenOnSyntax(provideInSyntax, provideWhenSyntax, provideOnSyntax) {
        this._provideInSyntax = provideInSyntax;
        this._provideWhenSyntax = provideWhenSyntax;
        this._provideOnSyntax = provideOnSyntax;
    }
    ProvideInWhenOnSyntax.prototype.when = function (constraint) {
        return this._provideWhenSyntax.when(constraint);
    };
    ProvideInWhenOnSyntax.prototype.whenTargetNamed = function (name) {
        return this._provideWhenSyntax.whenTargetNamed(name);
    };
    ProvideInWhenOnSyntax.prototype.whenTargetTagged = function (tag, value) {
        return this._provideWhenSyntax.whenTargetTagged(tag, value);
    };
    ProvideInWhenOnSyntax.prototype.whenInjectedInto = function (parent) {
        return this._provideWhenSyntax.whenInjectedInto(parent);
    };
    ProvideInWhenOnSyntax.prototype.whenParentNamed = function (name) {
        return this._provideWhenSyntax.whenParentNamed(name);
    };
    ProvideInWhenOnSyntax.prototype.whenParentTagged = function (tag, value) {
        return this._provideWhenSyntax.whenParentTagged(tag, value);
    };
    ProvideInWhenOnSyntax.prototype.whenAnyAncestorIs = function (ancestor) {
        return this._provideWhenSyntax.whenAnyAncestorIs(ancestor);
    };
    ProvideInWhenOnSyntax.prototype.whenNoAncestorIs = function (ancestor) {
        return this._provideWhenSyntax.whenNoAncestorIs(ancestor);
    };
    ProvideInWhenOnSyntax.prototype.whenAnyAncestorNamed = function (name) {
        return this._provideWhenSyntax.whenAnyAncestorNamed(name);
    };
    ProvideInWhenOnSyntax.prototype.whenAnyAncestorTagged = function (tag, value) {
        return this._provideWhenSyntax.whenAnyAncestorTagged(tag, value);
    };
    ProvideInWhenOnSyntax.prototype.whenNoAncestorNamed = function (name) {
        return this._provideWhenSyntax.whenNoAncestorNamed(name);
    };
    ProvideInWhenOnSyntax.prototype.whenNoAncestorTagged = function (tag, value) {
        return this._provideWhenSyntax.whenNoAncestorTagged(tag, value);
    };
    ProvideInWhenOnSyntax.prototype.whenAnyAncestorMatches = function (constraint) {
        return this._provideWhenSyntax.whenAnyAncestorMatches(constraint);
    };
    ProvideInWhenOnSyntax.prototype.whenNoAncestorMatches = function (constraint) {
        return this._provideWhenSyntax.whenNoAncestorMatches(constraint);
    };
    ProvideInWhenOnSyntax.prototype.onActivation = function (fn) {
        return this._provideOnSyntax.onActivation(fn);
    };
    ProvideInWhenOnSyntax.prototype.inSingletonScope = function () {
        return this._provideInSyntax.inSingletonScope();
    };
    ProvideInWhenOnSyntax.prototype.done = function () {
        return this._provideInSyntax.done();
    };
    return ProvideInWhenOnSyntax;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ProvideInWhenOnSyntax;
